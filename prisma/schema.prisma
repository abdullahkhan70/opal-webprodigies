// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  firstname     String?
  lastname      String?
  image         String?
  studio        Media?
  trial         Boolean  @default(false)
  firstView     Boolean  @default(false)
  clerkid       String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  workspace     Workspace[]
  videos        Videos[]
  subscription  Subscription?
  members       Members[]
  notification  Notifications[]
  sender        Invite[] @relation("sender")
  receiver      Invite[] @relation("receiver")
  comment       Comment[]
}

model Comment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment     String
  reply       Comment[] @relation("reply")
  Comment     Comment?  @relation("reply", fields: [commentId], references: [id])
  commentId   String?   @unique @db.Uuid
  User        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique @db.Uuid
  video       Videos?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     String?   @unique @db.Uuid
  createdAt   DateTime  @default(now())
}

model Subscription {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?             @relation(fields: [userId], references: [id])
  userId      String            @unique @db.Uuid
  createdAt   DateTime          @default(now())
  plan        SUBSCRIPTON_PLAN  @default(FREE)
  updateAt    DateTime          @default(now())
  customerId  String?           @unique
}

model Media {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen    String?
  mic       String?
  camera    String?
  preset    PRESET   @default(SD)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique  @db.Uuid
}

model Workspace {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @unique @db.Uuid
  type      Type
  createAt  DateTime  @default(now())
  folders   Folders[]
  videos    Videos[]
  members   Members[]
  invite    Invite[]
}

model Folders {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @default("Untitled Folder")
  createdAt   DateTime    @default(now())
  WorkSpace   Workspace?  @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?     @unique @db.Uuid
  videos      Videos[]
}

model Videos {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?     @default("Untitled Video")
  description String?     @default("No Description")
  source      String      @unique
  createdAt   DateTime    @default(now())
  Folder      Folders?     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?     @unique @db.Uuid
  User        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?     @unique @db.Uuid
  processing  Boolean     @default(true)
  Workspace   Workspace?  @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?     @unique @db.Uuid
  views       Int         @default(0)
  summary     String?
  Comment     Comment[]
}

model Members {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?     @unique @db.Uuid
  createdAt   DateTime    @default(now())
  member      Boolean     @default(true)
  Workspace   Workspace?   @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?     @unique @db.Uuid
}

model Notifications {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?     @unique @db.Uuid
  content     String
}

model Invite {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender      User?       @relation("sender", fields: [senderId], references: [id])
  senderId    String?     @unique @db.Uuid
  receiver    User?       @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String?     @unique @db.Uuid
  content     String
  Workspace   Workspace?  @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?     @unique @db.Uuid
  accepted    Boolean     @default(false)    
}

enum PRESET {
  HD
  SD
}

enum Type {
  PERSONAL
  PUBLIC
}

enum SUBSCRIPTON_PLAN {
  PRO
  FREE
}
